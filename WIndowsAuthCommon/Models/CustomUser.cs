using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using WIndowsAuthCommon.Identity;
using WIndowsAuthCommon.Interfaces;

namespace WIndowsAuthCommon.Models
{
    public class CustomUser : IdentityUser, ICustomUser
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime DateCreated { get; set; }
        public DateTime DateLastModified { get; set; }

        //Password Details kept in case you want to move away from windows auth, but otherwise not used
        public string HashedPassword { get; set; }
        public int PasswordIterationCount { get; set; }
        public byte[] PasswordSalt { get; set; }
        //*******************************************************************

        //whether or not the user was auto-created through windows authentication, or created another way.  useful if you want to use the same database
        //for 2 different sites, one windows authenticated, the other through a normal login screen.
        public bool IsUserAutoGenerated { get; set; }

        public async Task<ClaimsIdentity> GenerateUserIdentityAsync(CustomUserManager manager, string authenticationType)
        {
            // Note the authenticationType must match the one defined in CookieAuthenticationOptions.AuthenticationType
            var userIdentity = await manager.CreateIdentityAsync(this, authenticationType);
            // Add custom user claims here
            return userIdentity;
        }

    }
}
