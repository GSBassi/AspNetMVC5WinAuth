using System;
using System.Collections.Generic;
using System.DirectoryServices.AccountManagement;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using WIndowsAuthCommon.Models;
using WIndowsAuthCommon.Utilities;

namespace AspNetMVC5WinAuth.Controllers
{
    public partial class AccountController : baseController
    {
        [AllowAnonymous]
        private async Task<ActionResult> WindowsLogin(string returnUrl)
        {
            if (!Helpers.WebConfigSettings.UseWindowsAuthentication)
            {
                throw new InvalidOperationException("Not a valid server for windows authentication");
            }
            bool b = await BuildWindowsUser();
            if (b)
            {
                return RedirectToLocal(returnUrl);
            }
            else
            {
                throw new InvalidOperationException("Could not log on windows user");
            }
        }

        private string windowsUserName
        {
            get
            {
                return System.Environment.UserDomainName + @"\" + System.Environment.UserName;
            }
        }

        internal async Task<bool> BuildWindowsUser()
        {
            CustomUser user = await UserManager.FindByNameAsync(windowsUserName);
            if ((user != null) && (!string.IsNullOrEmpty(user.Id)))
            {
                if (!user.IsUserAutoGenerated)
                {
                    //weird circumstance.  
                    throw new InvalidOperationException("User with login name " + windowsUserName + " exists, but not as a windows authorized user");
                }
                else
                {
#if !DEBUG
                if (Request.IsSecureConnection)
                {
#endif
                    string tokenURL = Url.Absolute(Url.Content("~/token"));
                    await TokenHolder.SetBearerTokenFromOAuth(tokenURL, user.UserName, windowsAuthPassword);
#if !DEBUG
                }
#endif
                    await SignInManager.SignInAsync(user, true, true);
                    return true;
                }
            }
            else
            {
                user = GetAutoCreateUser();
                var result = await UserManager.CreateAsync(user);
                if (result.Succeeded)
                {
                    //this sucks, we don't know the user id yet without grabbing it again:
                    user = await UserManager.FindByNameAsync(user.UserName);
                    //add user role
                    //await UserManager.AddToRoleAsync(user.Id, "WhateverRoleIsInYourDatabase");
                    return await BuildWindowsUser();
                }
                else
                {
                    throw new InvalidOperationException(string.Join("|", result.Errors));
                }
            }
            //return false;
        }

        private const string windowsAuthPassword = "whateveryoufeellikeputtinghereitsnotused";

        private CustomUser GetAutoCreateUser()
        {
            CustomUser usr = new CustomUser();
            usr.UserName = windowsUserName;
            usr.PasswordIterationCount = CustomEncrypt.minimumIterationCount;
            usr.PasswordSalt = CustomEncrypt.PBKDF2GetRandomSalt();
            usr.PasswordHash = CustomEncrypt.PBKDF2HashedPassword(windowsAuthPassword, usr.PasswordSalt, usr.PasswordIterationCount);
            usr.IsUserAutoGenerated = true;
            usr.DateCreated = System.DateTime.UtcNow;
            usr.DateLastModified = System.DateTime.UtcNow;

            //this section is intended on connecting to the domain controller and getting some information about the user to add to our user object
            //doesn't always work based on the security of the DC
            try
            {
                UserPrincipalExtended windowsUser = UserPrincipalExtended.FindByIdentity(new PrincipalContext(ContextType.Domain), User.Identity.Name);
                if (windowsUser != null)
                {
                    usr.LastName = windowsUser.Surname;
                    usr.FirstName = windowsUser.GivenName;
                    //windowsUser.Title;
                    //windowsUser.Department;

                    usr.PhoneNumber = windowsUser.VoiceTelephoneNumber;
                    usr.Email = windowsUser.EmailAddress;
                }
            }
            catch (Exception)// ex)
            {
                //ignore for now
            }
            if (string.IsNullOrEmpty(usr.FirstName))
            {
                usr.FirstName = windowsUserName;
            }
            if (string.IsNullOrEmpty(usr.LastName))
            {
                usr.LastName = windowsUserName;
            }
            return usr;
        }

    }

    [DirectoryRdnPrefix("CN")]
    [DirectoryObjectClass("user")]
    internal class UserPrincipalExtended : UserPrincipal
    {
        internal UserPrincipalExtended(PrincipalContext context)
            : base(context)
        {
        }

        internal UserPrincipalExtended(PrincipalContext context, string samAccountName, string password, bool enabled)
            : base(context, samAccountName, password, enabled)
        {
        }

        [DirectoryProperty("title")]
        internal string Title
        {
            get
            {
                if (ExtensionGet("title").Length != 1)
                    return null;

                return (string)ExtensionGet("title")[0];
            }

            set
            {
                ExtensionSet("title", value);
            }
        }

        [DirectoryProperty("department")]
        internal string Department
        {
            get
            {
                if (ExtensionGet("department").Length != 1)
                    return null;

                return (string)ExtensionGet("department")[0];
            }

            set
            {
                ExtensionSet("department", value);
            }
        }

        internal static new UserPrincipalExtended FindByIdentity(PrincipalContext context, string identityValue)
        {
            return (UserPrincipalExtended)FindByIdentityWithType(context, typeof(UserPrincipalExtended), identityValue);
        }

        internal static new UserPrincipalExtended FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue)
        {
            return (UserPrincipalExtended)FindByIdentityWithType(context, typeof(UserPrincipalExtended), identityType, identityValue);
        }
    }
}